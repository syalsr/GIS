// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: GIS/v1/gis.proto

package gis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GISClient is the client API for GIS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GISClient interface {
	CreateStop(ctx context.Context, in *RequestStop, opts ...grpc.CallOption) (*ResponseWithOnlyError, error)
	CreateBus(ctx context.Context, in *RequestBus, opts ...grpc.CallOption) (*ResponseWithOnlyError, error)
	BuildRoute(ctx context.Context, in *RequestRoute, opts ...grpc.CallOption) (*ResponseRoute, error)
}

type gISClient struct {
	cc grpc.ClientConnInterface
}

func NewGISClient(cc grpc.ClientConnInterface) GISClient {
	return &gISClient{cc}
}

func (c *gISClient) CreateStop(ctx context.Context, in *RequestStop, opts ...grpc.CallOption) (*ResponseWithOnlyError, error) {
	out := new(ResponseWithOnlyError)
	err := c.cc.Invoke(ctx, "/gis.v1.GIS/CreateStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gISClient) CreateBus(ctx context.Context, in *RequestBus, opts ...grpc.CallOption) (*ResponseWithOnlyError, error) {
	out := new(ResponseWithOnlyError)
	err := c.cc.Invoke(ctx, "/gis.v1.GIS/CreateBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gISClient) BuildRoute(ctx context.Context, in *RequestRoute, opts ...grpc.CallOption) (*ResponseRoute, error) {
	out := new(ResponseRoute)
	err := c.cc.Invoke(ctx, "/gis.v1.GIS/BuildRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GISServer is the server API for GIS service.
// All implementations should embed UnimplementedGISServer
// for forward compatibility
type GISServer interface {
	CreateStop(context.Context, *RequestStop) (*ResponseWithOnlyError, error)
	CreateBus(context.Context, *RequestBus) (*ResponseWithOnlyError, error)
	BuildRoute(context.Context, *RequestRoute) (*ResponseRoute, error)
}

// UnimplementedGISServer should be embedded to have forward compatible implementations.
type UnimplementedGISServer struct {
}

func (UnimplementedGISServer) CreateStop(context.Context, *RequestStop) (*ResponseWithOnlyError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStop not implemented")
}
func (UnimplementedGISServer) CreateBus(context.Context, *RequestBus) (*ResponseWithOnlyError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBus not implemented")
}
func (UnimplementedGISServer) BuildRoute(context.Context, *RequestRoute) (*ResponseRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRoute not implemented")
}

// UnsafeGISServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GISServer will
// result in compilation errors.
type UnsafeGISServer interface {
	mustEmbedUnimplementedGISServer()
}

func RegisterGISServer(s grpc.ServiceRegistrar, srv GISServer) {
	s.RegisterService(&GIS_ServiceDesc, srv)
}

func _GIS_CreateStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GISServer).CreateStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.v1.GIS/CreateStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GISServer).CreateStop(ctx, req.(*RequestStop))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIS_CreateBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GISServer).CreateBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.v1.GIS/CreateBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GISServer).CreateBus(ctx, req.(*RequestBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GIS_BuildRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GISServer).BuildRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.v1.GIS/BuildRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GISServer).BuildRoute(ctx, req.(*RequestRoute))
	}
	return interceptor(ctx, in, info, handler)
}

// GIS_ServiceDesc is the grpc.ServiceDesc for GIS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GIS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gis.v1.GIS",
	HandlerType: (*GISServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStop",
			Handler:    _GIS_CreateStop_Handler,
		},
		{
			MethodName: "CreateBus",
			Handler:    _GIS_CreateBus_Handler,
		},
		{
			MethodName: "BuildRoute",
			Handler:    _GIS_BuildRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GIS/v1/gis.proto",
}
